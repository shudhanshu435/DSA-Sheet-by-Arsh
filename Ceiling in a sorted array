// Ceiling in a sorted array:::
// Given a sorted array and a value x, the ceiling of x is the smallest element in array greater than or equal to x, and the floor is the greatest element smaller than or equal to x. Assume than the array is sorted in non-decreasing order. Write efficient functions to find floor and ceiling of x.

#include <bits/stdc++.h>
using namespace std;

int ceilFloor(int arr[], int l, int h, int x)  
{

    if (x < arr[l])
        return l;
    if (x > arr[h])
        return -1;
    while (l <= h)
    {
        int mid;
        mid = (l + h) / 2;
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
        {
            if (arr[mid - 1] < x && mid - 1 >= l)
                return mid;
            else
                h = mid - 1;
        }
        else
        {
            if (arr[mid + 1] > x && mid + 1 <= h)
                return mid + 1;
            else
                l = mid + 1;
        }
    }
    return 0;
}
int main()
{
    int len, x;
    cout << "Enter the length of array:" << endl;
    cout << "Enter the value x:" << endl;
    cin >> len >> x;
    int arr[len];
    vector<int> vec;
    cout << "Enter elements of sorted array:" << endl;
    for (int i = 0; i < len; i++)
    {
        cin >> arr[i];
        vec.push_back(arr[i]);
    }
    int g = ceilFloor(arr, 0, len - 1, x);

    if (g == -1)
    {
        cout << "ceiling value doesn't exist" << endl;
        cout << "floor value is " << arr[len - 1] << endl;
    }
    else
    {
        cout << "ceiling value is " << arr[g] << endl;
        if (find(vec.begin(), vec.end(), x) != vec.end())
            cout << "floor value is " << arr[g] << endl;
        else
        {
            if (g == 0)
                cout << "floor value doesn't exist" << endl;
            else
                cout << "floor value is " << arr[g - 1] << endl;
        }
    }

    return 0;
}
